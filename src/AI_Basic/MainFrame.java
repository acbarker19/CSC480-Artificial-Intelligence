/**
 * MainFrame.
 * A GUI frame class that a user can interact with to set the problem for the
 * agent.
 * 
 * @author Alec Barker
 */
package AI_Basic;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JOptionPane;

public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        textArea.setFont(new Font("Courier New", Font.PLAIN, 16));
        
        String[] sampleProblems = new String[] {
            "M&C 1", "M&C 2", "Invalid M&C 1", "Invalid M&C 2",
            "8 Puzzle 1", "8 Puzzle 2", "Invalid 8 Puzzle 1",
            "Invalid 8 Puzzle 2", "Route Finder 1", "Route Finder 2",
            "Invalid Route Finder 1", "Invalid Route Finder 2"
        };
        sampleProblemsComboBox.removeAllItems();
        for(String sample : sampleProblems){
            sampleProblemsComboBox.addItem(sample);
        }
        
        String[] ticTacToeActions = new String[] {
            "Top Left", "Top Center", "Top Right",
            "Middle Left", "Middle Center", "Middle Right",
            "Bottom Left", "Bottom Center", "Bottom Right"
        };
        ticTacToeComboBox.removeAllItems();
        for(String action : ticTacToeActions){
            ticTacToeComboBox.addItem(action);
        }
        
        ticTacToeComboBox.setEnabled(false);
        ticTacToeSubmitButton.setEnabled(false);
        
        ticTacToeCheckbox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if(ticTacToeCheckbox.isSelected()){
                    textArea.setEnabled(false);
                    enterButton.setEnabled(false);
                    clearButton.setEnabled(false);
                    sampleProblemsComboBox.setEnabled(false);
                    ticTacToeComboBox.setEnabled(true);
                    ticTacToeSubmitButton.setEnabled(true);
                    
                    // if new game
                    if(textArea.getText().startsWith("TIC-TAC-TOE") == false){
                        ticTacToeComboBox.removeAllItems();
                        for(String action : ticTacToeActions){
                            ticTacToeComboBox.addItem(action);
                        }
                    }
                }else{
                    textArea.setEnabled(true);
                    enterButton.setEnabled(true);
                    clearButton.setEnabled(true);
                    sampleProblemsComboBox.setEnabled(true);
                    ticTacToeComboBox.setEnabled(false);
                    ticTacToeSubmitButton.setEnabled(false);
                }
            }
          });
    }
    
    private void displayError(String error){
        JOptionPane.showMessageDialog(null,
                "<html><body><p style='width: 200px;'>" + error.replace("\n",
                        "<br>") + "</p></body></html>",
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        enterButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        sampleProblemsComboBox = new javax.swing.JComboBox<>();
        ticTacToeCheckbox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        ticTacToeComboBox = new javax.swing.JComboBox<>();
        ticTacToeSubmitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        enterButton.setText("Enter");
        enterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        sampleProblemsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        sampleProblemsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampleProblemsComboBoxActionPerformed(evt);
            }
        });

        ticTacToeCheckbox.setText("Tic-Tac-Toe");

        jLabel1.setText("Your Move:");

        ticTacToeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        ticTacToeSubmitButton.setText("Submit");
        ticTacToeSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ticTacToeSubmitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sampleProblemsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ticTacToeCheckbox)
                    .addComponent(jLabel1)
                    .addComponent(ticTacToeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ticTacToeSubmitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterButton)
                    .addComponent(clearButton)
                    .addComponent(sampleProblemsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ticTacToeCheckbox)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ticTacToeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ticTacToeSubmitButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterButtonActionPerformed
        String input = textArea.getText();
        
        String errorMessage = ValidityChecker.runChecks(input);
        
        // If the input is incorrect, display error message.
        // If input returns null, it is correct and runs program.
        if(errorMessage != null){
            displayError(errorMessage);
        }else{
            textArea.setText(input + "\r\n\r\n===================");
            
            Agent agent = new Agent(input);
            
            Sequence solution = agent.getSolution();
            
            String output = textArea.getText() +
                    "\r\n\r\nNumber of Steps to Get to Solution: " +
                    (solution.size() - 1) + "\r\n\r\nSteps to Get to Solution:";
            
            State currentState = agent.getProblem().getInitialState();
            for(int i = 0; i < solution.size(); i++){
                if(solution.get(i) != null){
                    output += "\r\n" + currentState.toString() +
                            " + " + solution.get(i).toString() +
                            " = " + agent.getProblem().getResult(currentState, 
                                    solution.get(i));
                    if(agent.getProblemName().equals("Route Finder")){
                        output += "\tDistance: " +
                                agent.getProblem().getPathCost(
                                        currentState, solution.get(i));
                    }
                    currentState = agent.getProblem().getResult(currentState, 
                                    solution.get(i));
                }
            }
            textArea.setText(output);
        }
    }//GEN-LAST:event_enterButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        textArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void sampleProblemsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampleProblemsComboBoxActionPerformed
        String input = (String)sampleProblemsComboBox.getSelectedItem();
        
        if(input != null){
            switch(input){
                case "M&C 1":
                    textArea.setText("M&C#331000#000133");
                    break;
                case "M&C 2":
                    textArea.setText("M&C#321001#000133");
                    break;
                case "Invalid M&C 1":
                    textArea.setText("M&C#201013#000133");
                    break;
                case "Invalid M&C 2":
                    textArea.setText("M&C#330100#000133");
                    break;
                case "8 Puzzle 1":
                    textArea.setText("8puzzle#012345678#102345678");
                    break;
                case "8 Puzzle 2":
                    textArea.setText("8puzzle#012345678#125348607");
                    break;
                case "Invalid 8 Puzzle 1":
                    textArea.setText("8puzzle#012345678#0one2345678");
                    break;
                case "Invalid 8 Puzzle 2":
                    textArea.setText("8puzzle#123456789#192345678");
                    break;
                case "Route Finder 1":
                    textArea.setText("Route#Arad#Oradea#Oradea 71 Zerind\n"
                            + "Oradea 151 Sibiu\n"
                            + "Zerind 75 Arad\n"
                            + "Arad 140 Sibiu\n"
                            + "Arad 118 Timisoara\n"
                            + "Timisoara 111 Lugoj\n"
                            + "Lugoj 70 Mehadia\n"
                            + "Mehadia 75 Drobeta\n"
                            + "Drobeta 120 Craiova\n"
                            + "Craiova 146 Rimnicu_Vilcea\n"
                            + "Rimnicu_Vilcea 80 Sibiu\n"
                            + "Craiova 138 Pitesti\n"
                            + "Pitesti 97 Rimnicu_Vilcea\n"
                            + "Pitesti 101 Bucharest\n"
                            + "Sibiu 99 Fagaras\n"
                            + "Fagaras 211 Bucharest\n"
                            + "Bucharest 90 Giurgiu\n"
                            + "Bucharest 85 Urziceni\n"
                            + "Urziceni 98 Hirsova\n"
                            + "Hirsova 86 Eforie\n"
                            + "Urziceni 142 Vaslui\n"
                            + "Vaslui 92 Iasi\n"
                            + "Iasi 87 Neamt");
                    break;
                case "Route Finder 2":
                    textArea.setText("Route#A#Z#A 1 B\n"
                            + "B 1 C\n"
                            + "C 1 Z\n"
                            + "C 1 D\n"
                            + "A 100 Z");
                    break;
                case "Invalid Route Finder 1":
                    textArea.setText("Route#Cleveland#Oradea#Oradea 71 Zerind\n"
                            + "Oradea 151 Sibiu\n"
                            + "Zerind 75 Arad\n"
                            + "Arad 140 Sibiu\n"
                            + "Arad 118 Timisoara\n"
                            + "Timisoara 111 Lugoj\n"
                            + "Lugoj 70 Mehadia\n"
                            + "Mehadia 75 Drobeta\n"
                            + "Drobeta 120 Craiova\n"
                            + "Craiova 146 Rimnicu_Vilcea\n"
                            + "Rimnicu_Vilcea 80 Sibiu\n"
                            + "Craiova 138 Pitesti\n"
                            + "Pitesti 97 Rimnicu_Vilcea\n"
                            + "Pitesti 101 Bucharest\n"
                            + "Sibiu 99 Fagaras\n"
                            + "Fagaras 211 Bucharest\n"
                            + "Bucharest 90 Giurgiu\n"
                            + "Bucharest 85 Urziceni\n"
                            + "Urziceni 98 Hirsova\n"
                            + "Hirsova 86 Eforie\n"
                            + "Urziceni 142 Vaslui\n"
                            + "Vaslui 92 Iasi\n"
                            + "Iasi 87 Neamt");
                    break;
                case "Invalid Route Finder 2":
                    textArea.setText("Route#A#Z#A 1 B\n"
                            + "B 1 C Z\n"
                            + "C 1 Z\n"
                            + "C 1 D\n"
                            + "A 100 Z");
                    break;
            }
        }
    }//GEN-LAST:event_sampleProblemsComboBoxActionPerformed

    private void ticTacToeSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ticTacToeSubmitButtonActionPerformed
        ProblemTicTacToe pttt;
        String currentState;
        
        // if game is already in progress
        if(textArea.getText().startsWith("TIC-TAC-TOE")){
            currentState = textArea.getText().substring(11, 20);
        }
        //if new game
        else{
            currentState = "---------";
        }
        
        pttt = new ProblemTicTacToe(new State(currentState));
        
        Action playerAction;
        switch (ticTacToeComboBox.getSelectedItem().toString()) {
            case "Top Left":
                playerAction = new Action("0 0");
                break;
            case "Top Center":
                playerAction = new Action("1 0");
                break;
            case "Top Right":
                playerAction = new Action("2 0");
                break;
            case "Middle Left":
                playerAction = new Action("0 1");
                break;
            case "Middle Center":
                playerAction = new Action("1 1");
                break;
            case "Middle Right":
                playerAction = new Action("2 1");
                break;
            case "Bottom Left":
                playerAction = new Action("0 2");
                break;
            case "Bottom Center":
                playerAction = new Action("1 2");
                break;
            case "Bottom Right":
                playerAction = new Action("2 2");
                break;
            default:
                playerAction = new Action("NO ACTION");
                break;
        }
        
        String row1;
        String row2;
        String row3;
        
        State playerState = pttt.getResult(pttt.getInitialState(), playerAction);
        State displayState;
        
        String winner = "None";
        
        if(pttt.goalTest(playerState)){
            row1 = playerState.toString().substring(0, 3);
            row2 = playerState.toString().substring(3, 6);
            row3 = playerState.toString().substring(6, 9);
            
            displayState = playerState;
            winner = "Player";
        }else{
            Action bestAction = pttt.minimax(playerState);
            State newState = pttt.getResult(playerState, bestAction);

            row1 = newState.toString().substring(0, 3);
            row2 = newState.toString().substring(3, 6);
            row3 = newState.toString().substring(6, 9);
            
            displayState = newState;
            
            if(pttt.goalTest(newState)){
                winner = "Computer";
            }
        }
        
        textArea.setText("TIC-TAC-TOE\n" + displayState.toString().trim() +
                "\n\n" + row1.trim() + "\n" + row2.trim() + "\n" +
                row3.trim() + "\n\nWinner: " + winner);
    }//GEN-LAST:event_ticTacToeSubmitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton enterButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> sampleProblemsComboBox;
    private javax.swing.JTextArea textArea;
    private javax.swing.JCheckBox ticTacToeCheckbox;
    private javax.swing.JComboBox<String> ticTacToeComboBox;
    private javax.swing.JButton ticTacToeSubmitButton;
    // End of variables declaration//GEN-END:variables
}
